#!/usr/bin/perl

# acrontab command: 25 * * * * lxplus (/afs/cern.ch/user/n/nougaret/myMAD/madX/AUTOMATION/MadBuild.pl) > /afs/cern.ch/user/n/nougaret/MADbuilt.out 2>&1


use MIME::Lite; # to send e-mail

$startTime = localtime;

$htmlFile = '/afs/cern.ch/user/n/nougaret/www/mad/build.htm'; # for the time being

# first set environment variables for lf95 compiler
# this is necessary for the acron job which does not perform a login
# that would set the variables transparently.

my $path = $ENV{'PATH'}; # should handle case of empty string
my $newPath = $path . ":/afs/cern.ch/sw/fortran/nag/f95.5.361/bin:/afs/cern.ch/sw/fortran/lahey/lf9562/bin";
$ENV{'PATH'}=$newPath;

my $ldLibPath = $ENV{'LD_LIBRARY_PATH'}; # should handle case of empty string
my $newLdLibPath = $ldLlibPath . ":/afs/cern.ch/sw/fortran/lahey/lf9562/lib";
$ENV{'LD_LIBRARY_PATH'}=$newLdLibPath;


@extractedPackages = ('madX');


$pwd = `pwd`;
chop $pwd;
$extractDir = join("", $pwd, "/MadCvsExtract") ;
mkdir($extractDir, 0777);
chdir($extractDir);


$cvsDir = ":kserver:isscvs.cern.ch:/local/reps/madx" ;


foreach(@extractedPackages) {
    my $pack = $_;
    print "Extract package $pack from CVS\n";
    `cvs -d $cvsDir checkout $pack`;
}

# build
my $buildReport = "";

chdir('./madX');

$buildReport = "<table width=\"75%\" border=\"0\">\n";

@targets = ("madx","madxp");
foreach $target (@targets){

    `make clean`;
    `rm $target`;

    my $warnings = 0; # default
    my $makeResult = `make $target 2>&1`; # get both the command STDERR and STDOUT
    # process make output information to checkout whether there are warnings
    $_ = $makeResult;
    # in following regexps we want to avoid matching expressions such as '0 warnings' and keep the other warnings
    if (/warning^s/) {$warnings=1}; # at least one warning sufficient to conclude for a warning
    s/warning(s?)/<font class=\"warning\">warning\1<\/font>/g; # warning(s) will be highlighted in HTML page
    $makeResult = $_; # there must be a more succinct way to do the same in perl
    
    my $nbOfTargets = `ls $target | wc -w`;
    if ($nbOfTargets == 1) {
	if ($warnings==0) {
	    $compilationOutcome{$target} = 'success';
	} else {
	    $compilationOutcome{$target} = 'warning';
	}
    }
    else { 
	$compilationOutcome{$target} = 'failure';
       }
    $buildReport .= "<tr class =\"$compilationOutcome{$target}\"><td colspan=\"2\">$target</td><td>$compilationOutcome{$target}</td></tr>\n";
    $buildReport .= "<tr><td>$makeResult</td><tr>\n";

}

$buildReport .= "</table>\n";

$endTime = localtime;

# create web page
$html = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">';
$html .= "<html>\n";
$html .= "<head>\n";
$html .= "<title>MAD build result</title>\n";
$html .= "<link rel=stylesheet href=\"./MadTestWebStyle.css\" type=\"text/css\">"; # CSS stylesheet
$html .= "</head>\n";
$html .= "<!-- automatically generated by the MAD build script -->\n";
$html .= "<body>\n";
$html .= "<p>Build started $startTime, ended $endTime</p>";
$html .= $buildReport;
$html .= "</body>\n";
$html .= "</html>\n";
open(OUTHTML, ">$htmlFile");
print OUTHTML $html;
close OUTHTML;

# then send an e-mail to the FESA support team
  $msg = MIME::Lite->new(
			 From     => 'MAD.test.program@cern.ch',
			 To       => 'Jean-Luc.Nougaret@cern.ch',
			 Subject  => "Automated MAD Build $compilationOutcome{'madx'} for madx, $compilationOutcome{'madxp'} for madxp",
			 Data     => "This is an automated e-mail. Check report on\nhttp://test-mad-automation.web.cern.ch/test-mad-automation"
			);
  $msg->send;

