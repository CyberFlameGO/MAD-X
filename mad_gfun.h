#ifndef MAD_GFUN_H
#define MAD_GFUN_H

#if 0

/* Fortran routines called from C */

void    dynap_(double*, double*, int*, int*, double*, double*, double*, double*, double*);
/* drop first int* passed variable extern void    mtgetc_(int*, double*, double*); 05.02.2005 */
void    mtgetc_(double*, double*); /* mtgeti->mtgetc JMJ, 8/4/2003 */
void    collect_(int*, double*, double*); /* OB 13.2.2002 */
void    emit_(double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*);
void    fortinit_(void);
void    getclor_(double*, double*, double*, int*);
void    gxterm_(void);
void    haveit_(double *,double *,double *,double *,int *,int *, int *,double *,double *,double *,double *,double *,double *);
void    testit_(double *,double *,double *,double *,int *,int *, int *,double *,double *,double *,double *,double *,double *);
void    svdcorr_m_(double *,double *, double *,double *,double *, double *,double *,double *,double *,double *,double *,double *,double *,double *,double *,double *,int *,int *,int *,int *, int *, int *);
void    svdcorr_c_(double *,double *, double *,double *,double *, double *,double *,double *,double *,double *,double *,double *,double *,double *,double *,double *,int *,int *,int *,int *, int *, int *);
void    svddec_m_(double *,double *,double *,double *,double *,double *,double *,double *,double *,double *,int *,double *,double *,int *,int *, int *, int *, int *);
void    svddec_c_(double *,double *,double *,double *,double *,double *,double *,double *,double *,double *,int *,double *,double *,int *,int *, int *, int *, int *);
void    ibs_(void);
void    touschek_(void);
void    micit_(double *,char *,double *,double *,double *,int *,float *, int *,int *,int *,int *,float *,float *,float *,float *,float *, float *,float *,float *,float *,float *,int *);
void    mtlmdf_(int*, int*, double*, int*, int*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*);
void    mtjac_(int*, int*, int*, double*, double*, double*, int*, int*, double*, int*, double*, int*, int*, double*, double*, double*, double*, double*, double*, double*, double*);
void    mtsvd_(int*, int*, double*, double*, double*, double*);
void    mtmigr_(int*, int*, int*, double*, int*, int*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*);
void    mtsimp_(int*, int*, double*, int*, int*, double*, double*, double*, double*, double*, double*);
void    myindex(int*, int*, int*, int*, int*, int*, int *, int*);
void    res_index_(int*, int*, int*, int*, int indexa[4][1000], int*);
void    pefill_(int*);
void    pemima_(void);
void    pesopt_(int*);
void    plotit_(int*);
void    setup_(double *respx,double *dmat,int *im, int *ic, int *nm, int*nc);
void    soddin_(int*);
void    survey_(void);
void    tmrefe_(double*);
void    tmrefo_(int*,double*,double*,double*);
void    trrun_(int*,int*,double*,double*,int*,int*, double*,double*,double*,double*,double*,double*, double*,int*, int*, double*);
void    twiss_(double*, double*, int*, int*);

/* C routines called from Fortran and C */

int    type_ofCall advance_node(void);
int    type_ofCall advance_to_pos(char*, int*);
char*  type_ofCall alias(char*);
int    type_ofCall aperture_count(struct sequence*);
void   type_ofCall augment_count(char*);
void   type_ofCall augmentcountonly(char* table);
void   type_ofCall augmentcountmomtabs(double* s);
int    type_ofCall char_from_table(char*, char*, int*, char*); /* OB 2.4.2002 */
void   type_ofCall comment_to_table(char*, char*, int*);
void   type_ofCall comm_para(char*, int*, int*, int*, int*, double*, char*, int*);
int    type_ofCall double_from_table(char*, char*, int*, double*);
int    type_ofCall string_from_table(char*, char*, int*, char*);
void   type_ofCall double_to_table(char*, char*, double*);
void   type_ofCall double_to_table_row(char*, char*, int*, double*); /* ETDA 11 nov 2004 */
int    type_ofCall result_from_normal(char*, int*, double*); /* ETDA 11 nov 2004 */

void    make_map_table(int*); /* KZ 28.06.2005 table for maps */
void    copy_twiss_data(double*);
void    current_node_name(char*, int*);
int     el_par_vector(int*, double*);
void    element_name(char*, int*);
void    node_name(char* name, int* l);
double  frndm(void);
double  get_aperture(struct node*, char*);
double  get_apertol(struct node*, char*);
void    get_disp0(double*);
void    get_node_vector(char*, int*, double*);
int     get_option(char*);
int     get_string(char*, char*, char*);
void    get_twiss_data(double*);
void    get_title(char*, int*);
double  get_value(char*, char*);
double  get_beam_value(char*, char*);
double  get_variable(char*);
char*   get_varstring(char*);
int     get_vector(char*, char*, double*);
void    get_version(char*, int*);
double  grndm(void);
void    headvalue(char*, char*, double*);
int     intrac(void);
int     next_constraint(char*, int*, int*, double*, double*, double*, double*);
int     next_constr_namepos(char*);
int     next_global(char*, int*, int*, double*, double*, double*, double*);
int     next_start(double*,double*,double*,double*,double*,double*,double*, double*,double*,double*,double*,double*);
/* RDM 20.1.2006 BEGIN next_vary chage definition, new func defs*/
int     next_vary(char*, int*, double*, double*, double*, int*, double*);
int     vary_name(char*, int*, int*);
int     constraint_name(char*, int*, int*);
int     mtputconsname(char*, int*, char*,int*);
/* RDM 20.1.2006 END */
int     node_al_errors(double*);
int     node_fd_errors(double*);
void    node_string(char*, char*, int*);
double  node_value(char*);
void    store_node_value(char* par, double* value);
double  plot_option(char*);
void    reset_count(char*);
int     restart_sequ(void);
int     retreat_node(void);
void    sequence_name(char*, int*);
void    set_value(char*, char*, double*);
void    set_variable(char*, double*);
void    set_stringvar(char*, char*);
double  spec_node_value(char*, int*);
void    store_node_vector(char*, int*, double*);
void    string_to_table(char*, char*, char*);
int     table_length(char*);
int     table_org(char*);
void    table_range(char*, char*, int*);
void    vector_to_table(char*, char*, int*, double*);

/* added by E. T. d'Amico */
int     interp_node(int *nint);
int     reset_interpolation(int *nint);
int     embedded_twiss(void);
int     select_ptc_idx(void); /* 10 nov 2004 */
int     minimum_acceptable_order(void); /* 17 nov 2004 */
/* end additions */

/* C routines called from C */

double  act_value(int, struct name_list*);
int     act_special(int, char*);
int     add_drifts(struct node*, struct node*);
void    add_table_vars(struct name_list*, struct command_list*);
void    add_to_command_list(char*, struct command*, struct command_list*, int);
void    add_to_command_list_list(char*, struct command_list*, struct command_list_list*);
void    add_to_constraint_list(struct constraint*, struct constraint_list*);
void    add_to_el_list(struct element**, int, struct el_list*, int);
void    add_to_macro_list(struct macro*, struct macro_list*);
int     add_to_name_list(char*, int, struct name_list*);
void    add_to_node_list(struct node*, int, struct node_list*);
void    add_to_sequ_list(struct sequence*, struct sequence_list*);
void    add_to_table_list(struct table*, struct table_list*);
void    add_to_table_list_list(struct table_list*, struct table_list_list*);
void    add_to_var_list(struct variable*, struct var_list*, int);
void    add_vars_to_table(struct table*);
void    set_vars_from_table(struct table*);
void    adjust_beam(void);
void    all_node_pos(struct sequence*);
int     attach_beam(struct sequence*);
int     belongs_to_class(struct element*, char*);
char*   buffer(char*);
struct in_cmd* buffered_cmd(struct in_cmd*);
void    buffer_in_cmd(struct in_cmd*);
int     char_cnt(char, char*);
int     char_p_pos(char*, struct char_p_array*);
void    check_table(char*);
void    check_tabstring(char*);
struct char_p_array* clone_char_p_array(struct char_p_array*);
struct command* clone_command(struct command*);
struct command_parameter* clone_command_parameter(struct command_parameter*);
struct double_array* clone_double_array(struct double_array*);
struct element* clone_element(struct element*);
struct expression* clone_expression(struct expression*);
struct expr_list* clone_expr_list(struct expr_list*);
struct int_array* clone_int_array(struct int_array*);
struct macro* clone_macro(struct macro*);
struct name_list* clone_name_list(struct name_list*);
struct var_list* clone_var_list(struct var_list*);
struct node* clone_node(struct node*, int);
void    copy_double(double*, double*, int);
void    copy_name_list(struct name_list*, struct name_list*);
int     cmd_match(int, char**, int*, int*);
int     compare_no_case(char*, char*); /* like strcmp, case-independent */
void    complete_twiss_table(struct table*);
char*   compound(char*, int);
struct expression* compound_expr(struct expression*, double, char*, struct expression*, double);
int     count_nodes(struct sequence*);
void    control(struct in_cmd*);
void    conv_char(char*, struct int_array*);
void    conv_sixtrack(struct in_cmd*);
void    correct_correct(struct in_cmd*);
void    correct_correct1(struct in_cmd*);
void    correct_correct2(struct in_cmd*);
void    correct_getorbit(struct in_cmd*);
void    correct_putorbit(struct in_cmd*);
void    correct_usekick(struct in_cmd*);
void    correct_usemonitor(struct in_cmd*);
void    correct_option(struct in_cmd* cmd);
int     pro_correct_filter(int iplane, double sigcut);
int     pro_correct_getcorrs(struct in_cmd* cmd);
void    correct_readcorr(struct in_cmd* cmd);
void    correct_setcorr(struct in_cmd* cmd);
void    deco_init(void);
int     decode_command(void);
int     decode_par(struct in_cmd*, int, int, int, int);
struct char_array* delete_char_array(struct char_array*);
struct char_p_array* delete_char_p_array(struct char_p_array*, int);
double  combine_expr_expr(struct expression*, char*, struct expression*, struct expression**);
double  combine_expr_val(struct expression*, char*, double, struct expression**);
double  combine_val_expr(double, char*, struct expression*, struct expression**);
struct command* delete_command(struct command*);
struct command_list* delete_command_list(struct command_list*);
struct command_parameter* delete_command_parameter(struct command_parameter*);
struct command_parameter_list* delete_command_parameter_list(struct command_parameter_list*);
struct double_array* command_par_array(char*, struct command*);
struct expression* command_par_expr(char*, struct command*);
double  command_par_special(char*, struct element*);
char*   command_par_string(char*, struct command*);
double  command_par_value(char*, struct command*);
int     command_par_value2(char* parameter, struct command* cmd, double* val);
int     command_par_vector(char*, struct command*, double*);
struct constraint* delete_constraint(struct constraint*);
struct constraint_list* delete_constraint_list(struct constraint_list*);
struct element* delete_element(struct element*);
struct el_list* delete_el_list(struct el_list*);
struct expression* delete_expression(struct expression*);
struct expr_list* delete_expr_list(struct expr_list*);
struct double_array* delete_double_array(struct double_array*);
struct in_cmd* delete_in_cmd(struct in_cmd*);
struct int_array* delete_int_array(struct int_array*);
struct macro* delete_macro(struct macro*);
struct name_list* delete_name_list(struct name_list*);
struct node* delete_node(struct node*);
struct node* delete_node_ring(struct node*);
struct node_list* delete_node_list(struct node_list*);
struct sequence* delete_sequence(struct sequence*);
struct sequence_list* delete_sequence_list(struct sequence_list*);
struct variable* delete_variable(struct variable*);
struct var_list* delete_var_list(struct var_list*);
struct vector_list* delete_vector_list(struct vector_list*);
struct table* delete_table(struct table*);
void    disable_line(char*, struct macro_list*);
double  double_from_expr(char**, int, int);
int     down_unit(char*);
void    dump_constraint_list(struct constraint_list*);
void    dump_char_array(struct char_array*);
void    dump_char_p_array(struct char_p_array*);
void    dump_command(struct command*);
void    dump_command_parameter(struct command_parameter*);
void    dump_constraint(struct constraint*);
void    dump_element(struct element*);
void    dump_element_array(struct element**);
void    dump_el_list(struct el_list*);
void    dump_expression(struct expression*);
void    dump_exp_sequ(struct sequence*, int);
void    dump_in_cmd(struct in_cmd*);
void    dump_int_array(struct int_array*);
void    dump_macro(struct macro*);
void    dump_macro_list(struct macro_list*);
void    dump_name_list(struct name_list*);
void    dump_node(struct node*);
void    dump_sequ(struct sequence*, int);
void    dump_variable(struct variable*);
void    dynap_tables_create(struct in_cmd*);
double  element_value(struct node*, char*);
double  el_par_value(char*, struct element*);
int     element_vector(struct element*, char*, double*);
void    enter_element(struct in_cmd*);
void    enter_elm_reference(struct in_cmd*, struct element*, int);
void    enter_sequ_reference(struct in_cmd*, struct sequence*);
void    enter_sequence(struct in_cmd*);
void    enter_variable(struct in_cmd*);
void    exec_assign(struct in_cmd*);
void    exec_beam(struct in_cmd*, int);
void    exec_call(struct in_cmd*);
void    exec_command(void);
void    exec_create_table(struct in_cmd*);
void    exec_cmd_delete(struct in_cmd*);
void    exec_delete_sequ(char*);
void    exec_delete_table(char*);
void    exec_dump(struct in_cmd*);
void    exec_dumpsequ(struct in_cmd*);
void    exec_fill_table(struct in_cmd*);
void    exec_setvars_table(struct in_cmd*);
void    exec_help(struct in_cmd*);
void    exec_macro(struct in_cmd*, int);
void    exec_option(void);
void    exec_plot(struct in_cmd*);
void    exec_print(struct in_cmd*);
void    exec_save(struct in_cmd*);
void    exec_savebeta(void);
void    exec_show(struct in_cmd*);
void    exec_sodd(struct in_cmd*);
void    exec_extract(struct in_cmd*);
void    exec_store_coguess(struct in_cmd*);
void    expand_curr_sequ(int);
void    expand_line(struct char_p_array*);
struct node* expand_node(struct node*, struct sequence*, struct sequence*, double);
void    expand_sequence(struct sequence*, int);
void    export_comm_par(struct command_parameter*, char*);
void    export_element(struct element*, struct el_list*, FILE*);
void    export_elem_8(struct element*, struct el_list*, FILE*);
void    export_el_def(struct element*, char*);
void    export_el_def_8(struct element*, char*);
void    export_el_par_8(struct command_parameter*, char*);
void    export_sequence(struct sequence*, FILE*);
void    export_sequ_8(struct sequence*, struct command_list*, FILE*);
void    export_variable(struct variable*, FILE*);
void    export_var_8(struct variable*, FILE*);
double  expr_combine(struct expression*, double, char*, struct expression*, double, struct expression**);
double  expression_value(struct expression*, int);
void    fatal_error(char*, char*);
void    fill_beta0(struct command*, struct node*);
void    fill_constraint_list(int, struct command*, struct constraint_list*);
void    fill_elem_var_list(struct element*, struct el_list*, struct var_list*);
void    fill_expr_list(char**, int, int, struct expr_list*);
void    fill_expr_var_list(struct el_list*, struct expression*, struct var_list*);
void    fill_orbit_table(struct table*, struct table*);
void    fill_par_var_list(struct el_list*, struct command_parameter*, struct var_list*);
void    fill_sequ_var_list(struct sequence_list*, struct el_list*, struct var_list*);
void    fill_twiss_header(struct table*);
struct command* find_command(char*, struct command_list*);
struct command_list* find_command_list(char*, struct command_list_list*);
struct element* find_element(char*, struct el_list*);
struct variable* find_variable(char*, struct var_list*);
double  find_value(char*, int, char**);
int     force_pos(char*);
void    ftoi_array(struct double_array*, struct int_array*);
int     get_token_list(char*, char**,int);
void    get_bracket_range(char*, char, char, int*, int*);
void    get_bracket_t_range(char**, char, char, int, int, int*, int*);
void    get_defined_commands(void);
void    get_defined_constants(void);
struct element* get_drift(double);
char*   get_new_name(void);
double  get_node_pos(struct node*, struct sequence*);
int     get_node_count(struct node*);
int     get_ex_range(char*, struct sequence*, struct node**);
int     get_range(char*, struct sequence*, struct node**);
double  get_refpos(struct sequence*);
int     get_select_ex_ranges(struct sequence*,struct command_list*, struct node_list*);
int     get_select_ranges(struct sequence*,struct command_list*, struct node_list*);
void    get_select_t_ranges(struct command_list*, struct command_list*, struct table*);
int     get_sub_range(char*, struct sequence*, struct node**);
char*   get_table_string(char*, char*);
int     get_val_num(char*, int, int);
int     square_to_colon(char*);
int     get_stmt(FILE*, int);
int     get_table_range(char*, struct table* t, int*);
void    grow_char_array(struct char_array*);
void    grow_char_array_list(struct char_array_list*);
void    grow_char_p_array(struct char_p_array*);
void    grow_command_list(struct command_list*);
void    grow_command_list_list(struct command_list_list*);
void    grow_command_parameter_list(struct command_parameter_list*);
void    grow_constraint_list(struct constraint_list*);
void    grow_double_array(struct double_array*);
void    grow_el_list(struct el_list*);
void    grow_expr_list(struct expr_list*);
void    grow_in_buff_list(struct in_buff_list*);
void    grow_in_cmd_list(struct in_cmd_list*);
void    grow_int_array(struct int_array*);
void    grow_macro_list(struct macro_list*);
void    grow_name_list(struct name_list*);
void    grow_node_list(struct node_list*);
void    grow_sequence_list(struct sequence_list*);
void    grow_table(struct table*);
void    grow_table_list(struct table_list*);
void    grow_table_list_list(struct table_list_list*);
void    grow_var_list(struct var_list*);
void    grow_vector_list(struct vector_list*);
double  hidden_node_pos(char*, struct sequence*);
void    init55(int);
int     inbounds(char*, int, char**);
int     in_spec_list(char*);
int     int_in_array(int, int, int*);
void    insert_elem(struct sequence*, struct node*);
struct node* install_one(struct element*, char*, double, struct expression*, double);
int     is_token(char*, char*, int);
char*   join(char**, int);
char*   join_b(char**, int);
int     join_prefix(char*, int, char**);
double  line_nodes(struct char_p_array*);
void    link_in_front(struct node*, struct node*);
int     loc_expr(char**, int, int, int*);
int     logic_expr(int, char**);
int     log_val(char*, struct command*);
void    main_input(int);
struct constraint* make_constraint(int, struct command_parameter*);
struct element* make_element(char*, char*, struct command*, int);
void    make_elem_node(struct element*, int);
struct expression* make_expression(int, char**);
int     make_line(char*);
int     make_macro(char*);
void    make_occ_list(struct sequence*);
struct table* make_optics_table(struct table*);
void    make_sequ_from_line(char*);
void    make_sequ_node(struct sequence*, int);
char*   make_string_variable(char*);
struct table* make_table(char*, char*, char**, int*, int);
void    makethin(struct in_cmd*);
void    mtcond(int*, int*, double*, int*);
double  mult_par(char*, struct element*);
int     name_list_pos(char*, struct name_list*);
struct in_buff_list* new_in_buff_list(int);
struct char_array* new_char_array(int);
struct char_array_list* new_char_array_list(int);
struct char_p_array* new_char_p_array(int);
struct command* new_command(char*, int, int, char*, char*, int, int);
struct command_list* new_command_list(char*, int);
struct command_list_list* new_command_list_list(int);
struct constraint* new_constraint(int);
struct constraint_list* new_constraint_list(int);
struct in_buffer* new_in_buffer(int);
struct in_cmd* new_in_cmd(int);
struct in_cmd_list* new_in_cmd_list(int);
struct command_parameter* new_command_parameter(char*, int);
struct command_parameter_list* new_command_parameter_list(int);
struct double_array* new_double_array(int);
struct element* new_element(char*);
struct el_list* new_el_list(int);
struct expr_list* new_expr_list(int);
struct expression* new_expression(char*, struct int_array*);
struct int_array* new_int_array(int);
struct macro* new_macro(int, int, int);
struct macro_list* new_macro_list(int);
struct name_list* new_name_list(char*, int);
struct node* new_elem_node(struct element*, int);
struct node* new_node(char*);
struct node_list* new_node_list(int);
struct sequence* new_sequence(char*, int);
struct sequence_list* new_sequence_list(int);
struct node* new_sequ_node(struct sequence*, int);
struct table* new_table(char*, char*, int, struct name_list*);
struct table_list* new_table_list(int);
struct table_list_list* new_table_list_list(int);
struct variable* new_variable(char*, double, int, int, struct expression*, char*);
struct var_list* new_var_list(int);
struct vector_list* new_vector_list(int);
int     next_char(char, char**, int, int);
char    next_non_blank(char*);
int     next_non_blank_pos(char*);
char*   noquote(char*);
void    out_table(char*, struct table*, char*);
int     par_present(char*, struct command*, struct command_list*);
int     par_out_flag(char*, char*);
int     pass_select(char*, struct command*);
int     pass_select_list(char*, struct command_list*);
char*   permbuff(char*);
int     polish_expr(int, char**);
double  polish_value(struct int_array*, char*);
int     predef_const(struct variable*);
void    prepare_table_file(struct table*, struct command_list*);
void    pre_split(char*, struct char_array*, int);
void    print_command(struct command*);
void    print_command_parameter(struct command_parameter*);
void    print_global(double);
void    print_rfc(void);
void    print_table(struct table*);
void    print_value(struct in_cmd*);
void    pro_aperture(struct in_cmd*);
void    pro_match(struct in_cmd*);
void    pro_node(int, double);
void    process(void);
void    pro_correct(struct in_cmd*);
void    pro_emit(struct in_cmd*);
void    pro_error(struct in_cmd*);
void    pro_ibs(struct in_cmd*);
void    pro_touschek(struct in_cmd*);
void    pro_input(char*);
void    pro_sxf(struct in_cmd*);
void    pro_survey(struct in_cmd*);
void    pro_track(struct in_cmd*);
void    pro_twiss(void);
void    pro_ptc_twiss(void);
void    pro_ptc_create_layout(void);
void    pro_ptc_read_errors(void);
void    pro_ptc_refresh_k(void);
void    pro_ptc_track(struct in_cmd*);
void    pro_ptc_trackline(struct in_cmd*);
int     pro_ptc_select_checkpushtable(struct in_cmd* cmd, struct int_array** tabnameIA, struct int_array** colnameIA);
void    pro_ptc_knob(struct in_cmd* cmd);

void    put_info(char*, char*);
int     quote_level(char*, char*);
struct table* read_table(struct in_cmd*);
struct table* read_my_table(struct in_cmd*);
struct table* read_his_table(struct in_cmd*);
int     remove_colon(char**, int, int);
void    remove_from_command_list(char*, struct command_list*);
void    remove_from_macro_list(struct macro*, struct macro_list*);
int     remove_from_name_list(char*, struct name_list*);
void    remove_from_node_list(struct node*, struct node_list*);
void    remove_from_sequ_list(struct sequence*, struct sequence_list*);
int     remove_one(struct node*);
void    remove_range(char*, char*, char*);
void    remove_upto(char*, char*);
void    replace(char*, char, char);
void    replace_lines(struct macro*, int, char**);
void    replace_one(struct node*, struct element*);
void    resequence_nodes(struct sequence*);
void    reset_errors(struct sequence*);
void    reset_sector(struct sequence*, int);
double  rfc_slope(void);
void    save_beam(struct sequence*, FILE*);
int     scan_expr(int, char**);
void    scan_in_cmd(struct in_cmd*);
void    sector_out(char*, double*, double*, double*, double*); /*1st: sectortab*/
void    seq_cycle(struct in_cmd*);
void    seq_edit(struct in_cmd*);
void    seq_edit_ex(struct sequence*);
void    seq_edit_main(struct in_cmd*);
void    seq_end(struct in_cmd*);
void    seq_end_ex(void);
void    seq_flatten(struct sequence*);
void    seq_install(struct in_cmd*);
void    seq_move(struct in_cmd*);
void    seq_reflect(struct in_cmd*);
void    seq_replace(struct in_cmd*);
void    seq_remove(struct in_cmd*);
double  sequence_length(struct sequence*);
void    set_command_par_string(char* parameter, struct command* cmd, char* val);
void    set_command_par_value(char*, struct command*, double);
void    set_defaults(char*);
int     set_enable(char*, struct in_cmd*);
void    set_new_position(struct sequence*);
void    set_node_bv(struct sequence*);
void    set_option(char*, int*);
void    set_range(char*, struct sequence*);
void    set_selected_columns(struct table*, struct command_list*);
void    set_selected_errors(void);
void    set_selected_rows(struct table*, struct command_list*, struct command_list*);
void    set_twiss_deltas(struct command*);
void    set_sub_variable(char*, char*, struct in_cmd*);
void    set_sector(void);
void    show_beam(char*);
double  simple_double(char**, int, int);
int     simple_logic_expr(int, char**);
struct sequence* extract_sequence(char*, struct sequence*, struct node*, struct node*, char*);
int     mysplit(char*, struct char_p_array*);
void    store_beta0(struct in_cmd*);
void    store_command_def(char*);
struct command_parameter* store_comm_par_def(char**, int, int);
void    store_comm_par_value(char*, double, struct command*);
void    store_comm_par_vector(char*, double*, struct command*);
void    store_deselect(struct in_cmd*);
void    store_orbit(struct command*, double*);
void    store_savebeta(struct in_cmd*);
void    store_select(struct in_cmd*);
void    store_set(struct command*, int);
double  table_value(void);
int     table_row(struct table*, char*);
int     tab_name_code(char*, char*);
void    time_stamp(char*);
double  tgrndm(double);
char*   tmpbuff(char*);
void    track_dynap(struct in_cmd*);
void    track_end(struct in_cmd*);
void    ptc_track_end(void);
void    track_observe(struct in_cmd*);
void    ptc_track_observe(struct in_cmd*);
void    track_pteigen(double*);
void    track_run(struct in_cmd*);
void    track_ripple(struct in_cmd*);
void    track_start(struct command*);
void    track_tables_create(struct in_cmd*);
void    track_tables_dump(void);
void    track_track(struct in_cmd*);
void    w_ptc_create_universe(void);
void    w_ptc_create_layout(void);
void    w_ptc_export_xml(int * filename);
void    w_ptc_move_to_layout(void);
void    w_ptc_read_errors(void);
void    w_ptc_refresh_k(void);
void    w_ptc_input(void);
void    w_ptc_align(void);
void    w_ptc_twiss(int * twiss_table, int * summary_table);
void    w_ptc_normal(void);
void    w_ptc_start(void);
void    w_ptc_end(void);
void    w_ptc_moments(int* order);
void    w_ptc_initmoments(void);
void    w_ptc_dumpmaps(void);
void    w_ptc_trackline(int* nobspoints);
void    w_ptc_track_everystep(int* nobspoints);
void    w_ptc_setdebuglevel(int* level);
void    w_ptc_setaccel_method(int* method);
void    w_ptc_setexactmis(int* boolflag);
void    w_ptc_setradiation(int* boolflag);
void    w_ptc_setfringe(int* boolflag);
void    w_ptc_settotalpath(int* boolflag);
void    w_ptc_settime(int* boolflag);
void    w_ptc_setnocavity(int* boolflag);
void    w_ptc_addknob(int* fibrename);
void    w_ptc_addknob_i(int* iniparmetername);
void    w_ptc_addmoment(int* xi, int* pxi, int* yi, int* pyi, int* dpi, int* ti, int* tabn, int* coln, int* pm);
int     w_ptc_getnmoments(void);
void    w_ptc_getmomentstabcol(int* n, char* tabname, char* colname );
void    w_ptc_setknobvalue(int* fibrename);
void    w_ptc_refreshtables(void);
void    w_ptc_getnfieldcomp(int* fibreidx, int* ncomp, double*);
void    w_ptc_getsfieldcomp(int* fibreidx, int* ncomp, double*);
void    w_ptc_setfieldcomp(int* fibreidx);
void    w_ptc_rviewer(void);
void    w_ptc_eplacement(int* eidx,int* refframe);
void    w_ptc_writeparresults(int* filename);
void    w_ptc_printframes(int* filename);
void    w_ptc_printlayout_rootm(int* filename);
void    w_ptc_script(int* scriptname);
void    w_ptc_open_gino(int* scriptname);
void    w_ptc_addpush(int* tabname, int* colname, int* polinomial, int* monomial);
void    w_ptc_enforce6d(int* flag);
const char* getcurrentelementname(void);
int     getcurrentcmdname(char*);
int     makemomentstables(void);
int     twiss_input(struct command*);
void    update_beam(struct command*);
void    update_element(struct element*, struct command*);
void    update_node_constraints(struct node*, struct constraint_list*);
void    update_sequ_constraints(struct sequence*, struct constraint_list*);
void    update_vector(struct expr_list*, struct double_array*);
void    use_sequ(struct in_cmd*);
double  variable_value(struct variable*);
double  vdot(int*, double*, double*);
int     version_header(char*);
int     v_length(char*);
char*   v_format(char*);
double  vmod(int*, double*);
/*
void    error(char* t1, char* fmt, ...);
void    warningnew(char* t1, char* fmt, ...);
void    warning(char*, char*);
void    warningOld(char*, char*);
void    augmentfwarn(void) ;
*/
void    write_elems(struct el_list*, struct command_list*, FILE*);
void    write_elems_8(struct el_list*, struct command_list*, FILE*);
void    write_nice(char*, FILE*);
void    write_nice_8(char*, FILE*);
void    write_sequs(struct sequence_list*, struct command_list*, FILE*);
void    write_table(struct table*, char*);
void    write_vars(struct var_list*, struct command_list*, FILE*);
void    write_vars_8(struct var_list*,struct command_list*,  FILE*);
void    zero_double(double*, int);

/* define orbit correction routines */
void    pro_correct(struct in_cmd* cmd);
int     pro_correct_getcommands(struct in_cmd* cmd);
int     pro_correct_gettables(int ip, struct in_cmd* cmd);
int     pro_correct_getorbit(struct in_cmd* cmd);
int     pro_correct_getorbit_ext(struct in_cmd* cmd);
int     pro_correct_getactive(int ip, int *nm, int *nx, int *nc, double *corvec, double *monvec,char *conm);
int     pro_correct2_gettables(int ip, struct in_cmd* cmd);
int     pro_correct2_getorbit(struct in_cmd* cmd);
int     pro_correct2_getcorrs(struct in_cmd* cmd);
int     pro_correct2_getactive(int ip, int *nm, int *nx, int *nc, double *corvec, double *monvec,char *conm);
void    pro_correct_prtwiss(void);
void    pro_correct_write_cocu_table(void);
void    pro_correct_fill_corr_table(int ip , char *name, double old, double new);
void    pro_correct2_fill_corr_table(int b, int ip , char *name, double old, double new);
void    pro_correct_make_corr_table(void);
void    pro_correct2_make_corr_table(void);
void    pro_correct_write_results(double *monvec, double *resvec, double *corvec, int *nx, int *nc, int *nm, int imon, int icor, int ip);
void    pro_correct2_write_results(double *monvec, double *resvec, double *corvec, int *nx, int *nc, int *nm, int imon, int icor, int ip);
void    pro_correct_make_mon_table(void);
void    pro_correct2_make_mon_table(void);
void    pro_correct_fill_mon_table(int ip ,char *name, double old, double new);
void    pro_correct2_fill_mon_table(int ip ,char *name, double old, double new);
// double  crms(double *r, int m);
float   fextim(void);

double* pro_correct_response_ring(int ip, int nc, int nm);
double* pro_correct2_response_ring(int ip, int nc, int nm);
double* pro_correct_response_line(int ip, int nc, int nm);

/* define utilities for orbit and error routines */
int     str_from_table(char* table, char* name, int* row, char* val);
int     str_from_tablet(struct table *t, char* name, int* row, char* val);

/* C wrapper to allocate memory for Fortran77 */
int     c_micit(double*, char*, double*, double*, double*, int*, float, int, int, int);
void    c_haveit(double*, double* ,double* ,double* ,int*, int, int);
int     c_svddec(double*, int, int, int*, double*, double*);
int     c_svdcorr(double*, double*, double*, double*, int*, int, int);

/* define error routines */
// double  cprp(double *r, int m);
// double  copk(double *r, int m);
double  fact(int);
void    pro_error(struct in_cmd* cmd);
void    error_ealign(struct in_cmd* cmd);
void    error_efield(struct in_cmd* cmd);
void    error_efcomp(struct in_cmd* cmd);
void    error_eoption(struct in_cmd* cmd);
void    error_eprint(struct in_cmd* cmd);
void    error_esave(struct in_cmd* cmd);
void    error_seterr(struct in_cmd* cmd);
void    f_ctof(int *j, char *string, int *nel);
void    pro_error_make_efield_table(void);

/*Debug level */
void    seterrorflagfort(int* errcode, const char* from, int *lf, const char* descr, int *ld);
void    seterrorflag (int  errcode, const char* from, const char* descr);
int     geterrorflag(void);

char*   geterrrormessage(void);
int     gettrack(int* n, double* x,double* px,double* y,double* py,double* t,double* pt);
int     copytrackstoarray(void);
void    deletetrackstrarpositions(void);

#endif

/* rountines for makethin */
// void    set_selected_elements(void);

/* rountines for matchc */
void    mtjacprint(int, int, double*, struct in_cmd*);

/* routines for SDDS */
void    sel_table(char* tname, struct table* t);
void    set_selected_rows_tab(struct table* t, struct command_list* select, struct command_list* deselect);
void    pro_sdds(struct in_cmd* cmd);
int     sdds_ior(struct in_cmd* cmd);
int     sdds_iow(struct in_cmd* cmd);
int     sdds_readt(char *filename, char *tfsname);
int     sdds_writet_sel(char *filename, struct table *tfstab);
int     head_split(char* buf, struct char_p_array* list);
void    sel_table(char* tname, struct table* t);
void    set_selected_rows_tab(struct table* t, struct command_list* select, struct command_list* deselect);
int     pass_select_tab(char* name, struct command* sc);

/* SXF module routines */
/*
int     all_blank(char*);
char*   bpad(char*, int);
void    fill_dump(FILE*, int, char*, double*, int, int);
void    pro_elem_sxf(FILE*);
void    put_line(FILE*, char*);
void    accu_line(FILE*, char*);
void    get_sxf_names(void);
int     kl_trans(char*, char*, double*, int*);
void    r_indent(void);
void    s_indent(int);
int     sxf_align_fill(int, int, int, char**, double*);
void    sxf_body_fill(struct command*, int, int, int, char**, double);
int     sxf_decin(char*, int);
int     sxf_field_fill(int, int, int, char**, double*);
void    sxf_fill_command(struct command*, int, char**);
void    sxf_init(void);
void    sxf_out(void);
void    sxf_rtag(void);
void    sxf_read(struct command*);
void    sxf_write(struct command*, FILE*);
char*   tag_spec(char*);
void    reset_line(FILE*);
void    write_body(FILE*);
void    write_align(FILE*, struct double_array*);
void    write_elend(FILE*);
void    write_field(FILE*, struct double_array*);
void    write_elstart(FILE*);
void    cf77flush(void);
*/

#endif // MAD_GFUN_H

