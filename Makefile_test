# |
# o---------------------------------------------------------------------o
# |
# | MAD makefile - Tests
# |
# o---------------------------------------------------------------------o
# |
# | Methodical Accelerator Design
# |
# | Copyright (c) 2011+ CERN, mad@cern.ch
# |
# | For more information, see http://cern.ch/mad
# |
# o---------------------------------------------------------------------o
# |
# | $Id$
# |

#################################################
# testsuite

# variables:
# tests-all  : contains all tests        (includes tests-long)
# tests-long : contains all long tests   (overlaps tests-all)

# rules:
# tests      : runs tests-all not in tests-long
# tests-all  : runs tests-all

tests-all := \
test-rfmultipole test-rfmultipole-2 test-rfmultipole-3 test-rfmultipole-4 \
test-twiss \
test-jacobian test-jacobian-2 test-jacobian-knobs \
test-match test-match-2 \
\
test-ptc-twiss \
test-ptc-normal


tests-long := \
test-twiss \
test-match-2 \
test-ptc-twiss

tests-to-setup := \
test-ibs

# testsuite titles (attached to first rule of your suite)
test-rfmultipole:  TESTSUITE := RF multipole testsuite
test-twiss:        TESTSUITE := Twiss testsuite
test-jacobian:     TESTSUITE := Jacobian testsuite
test-match:        TESTSUITE := Matching testsuite
test-ptc-twiss:    TESTSUITE := PTC Twiss testsuite
test-ptc-normal:   TESTSUITE := PTC Normal testsuite

# end of testsuite
#################################################

ifndef MADX
# madx supported command for tests
MADXCMD := $(firstword $(wildcard \
             $(PROJECT)_dev$(ARCH)$(BINARY_EXT) $(PROJECT)_dev$(BINARY_EXT) \
             $(PROJECT)-dev$(ARCH)$(BINARY_EXT) $(PROJECT)-dev$(BINARY_EXT) \
             $(PROJECT)$(ARCH)$(BINARY_EXT)     $(PROJECT)$(BINARY_EXT) ))
MADX    := $(if $(MADXCMD),..$/..$/$(MADXCMD),$(PROJECT)_dev$(ARCH)$(BINARY_EXT))
endif

TESTCMD = $(MADX) < $(@F).madx

# end of makefile
